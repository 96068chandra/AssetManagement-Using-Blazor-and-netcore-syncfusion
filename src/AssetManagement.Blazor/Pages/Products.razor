@page "/products"
@using Volo.Abp.Application.Dtos
@using AssetManagement.Products
@using AssetManagement.Localization
@using Microsoft.Extensions.Localization
@using System.Linq
@inject IStringLocalizer<AssetManagementResource> L
@inject AbpBlazorMessageLocalizerHelper<AssetManagementResource> LH
@inject IJSRuntime JSRuntime
@imports "ant-design-vue"

<style>
    .ant-data-grid-content {
        height: 600px;
    }
</style>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Products"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="@OpenCreateModalAsync">
                    @L["NewProduct"]
                </Button>
            </Column>
        </Row>
    </CardHeader>

    <CardBody>
        <DataGrid TItem="ProductDto" Data="Entities"
                  ReadData="@OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="ProductDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="ProductDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="ProductDto"
                                          Text="@L["Edit"]"
                                          Clicked="@(() => OpenEditModalAsync(context))" />
                            <EntityAction TItem="ProductDto"
                                          Text="@L["Delete"]"
                                          Clicked="@(() => DeleteEntityAsync(context))"
                                          ConfirmationMessage="@(() => GetDeleteConfirmationMessage(context))" />

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.Name)"
                                Caption="@L["Name"]"> </DataGridColumn>

                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.Description)"
                                Caption="@L["Description"]">

                </DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.productType)"
                                Caption="@L["ProductType"]">
                    <DisplayTemplate>
                        @L[$"{context.productType}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.Price)"
                                Caption="@L["Price"]">

                </DataGridColumn>
                <DataGridColumn TItem="ProductDto"
                                Field="@nameof(ProductDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>


        </DataGrid>
    </CardBody>
</Card>

@if (CreateModalRef is not null)
{
    <Modal @ref="@CreateModalRef">
        <ModalBackdrop />
        <ModalContent IsCentered="true">
            <Form>
                <ModalHeader>
                    <ModalTitle>@L["NewProduct"]</ModalTitle>
                    <CloseButton Clicked="@CloseCreateModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Name"]</FieldLabel>
                                <TextEdit @bind-Text="@NewEntity.Name">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Field>
                            <FieldLabel>@L["ProductType"]</FieldLabel>
                            <Select TValue="ProductType" @bind-SelectedValue="@NewEntity.productType">
                                @foreach (var productTypeValue in Enum.GetValues(typeof(ProductType)))
                                {
                                    <SelectItem TValue="ProductType" Value="@((ProductType)productTypeValue)">
                                        @L[$"{productTypeValue}"]

                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Description"]</FieldLabel>
                                <TextEdit @bind-Text="@NewEntity.Description">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>

                        <Field>
                            <FieldLabel>@L["Price"]</FieldLabel>
                            <NumericEdit TValue="float" @bind-Value="@NewEntity.Price" @bind-Value:event="oninput" />
                        </Field>
                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="@CloseCreateModalAsync">
                        @L["Cancel"]
                    </Button>
                    <Button Color="Color.Primary"
                            Type="@ButtonType.Submit"
                            PreventDefaultOnSubmit="true"
                            Clicked="@CreateEntityAsync">
                        @L["Save"]
                    </Button>
                </ModalFooter>
            </Form>
        </ModalContent>
    </Modal>
}

@if (EditModalRef is not null)
{
    <Modal @ref="@EditModalRef">
        <ModalBackdrop />
        <ModalContent IsCentered="true">
            <Form>
                <ModalHeader>
                    <ModalTitle>@EditingEntity.Name</ModalTitle>
                    <CloseButton Clicked="@CloseEditModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Name"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingEntity.Name">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Field>
                            <FieldLabel>@L["ProductType"]</FieldLabel>
                            <Select TValue="ProductType" @bind-SelectedValue="@EditingEntity.productType">
                                @foreach (var productTypeValue in Enum.GetValues(typeof(ProductType)))
                                {
                                    <SelectItem TValue="ProductType" Value="@((ProductType)productTypeValue)">
                                        @L[$"{productTypeValue}"]

                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["Description"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingEntity.Description">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>

                        <Field>
                            <FieldLabel>@L["Price"]</FieldLabel>
                            <NumericEdit TValue="float" @bind-Value="@EditingEntity.Price" @bind-Value:event="oninput" />
                        </Field>
                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="@CloseEditModalAsync">@L["Cancel"]</Button>
                    <Button Color="Color.Primary"
                            Type="@ButtonType.Submit"
                            PreventDefaultOnSubmit="true"
                            Clicked="@UpdateEntityAsync">@L["Save"]</Button>
                </ModalFooter>
            </Form>
        </ModalContent>
    </Modal>
}

@code {
    private DataGridEntityActionsColumn<ProductDto> EntityActionsColumn { get; set; }
    private Modal CreateModalRef { get; set; }
    private Modal EditModalRef { get; set; }
    private Validations CreateValidationsRef { get; set; }
    private Validations EditValidationsRef { get; set; }
    private CreataUpdateProductDto NewEntity { get; set; } = new();
    private CreataUpdateProductDto EditingEntity { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NewEntity = new CreataUpdateProductDto();
        EditingEntity = new CreataUpdateProductDto();
    }

    private async Task OpenCreateModalAsync()
    {
        CreateModalRef?.Show();
    }

    private async Task CloseCreateModalAsync()
    {
        CreateModalRef?.Hide();
    }

    private async Task CreateEntityAsync()
    {
        await CreateEntityAsync(NewEntity);
        CreateModalRef?.Hide();
    }

    private async Task OpenEditModalAsync(ProductDto context)
    {
        EditingEntity = new CreataUpdateProductDto
        {
            Id = context.Id,
            Name = context.Name,
            Description = context.Description,
            productType = context.productType,
            Price = context.Price
        };
        EditModalRef?.Show();
    }

    private async Task CloseEditModalAsync()
    {
        EditModalRef?.Hide();
    }

    private async Task UpdateEntityAsync()
    {
        await UpdateEntityAsync(EditingEntity);
        EditModalRef?.Hide();
    }

    private async Task<string> GetDeleteConfirmationMessage(ProductDto context)
    {
        return await JSRuntime.InvokeAsync<string>("confirm", $"Are you sure you want to delete {context.Name}?");
    }
}
